// This file is autogenerated.
package client

import (
	"fmt"
	"github.com/keybase/cli"
	"github.com/keybase/client/go/libcmdline"
)

type CmdBTC struct {
	sessionID int
	address   string
	force     bool
}

func (c *CmdBTC) ParseArgv(ctx *cli.Context) error {
	if len(ctx.Args()) != 1 {
		return fmt.Errorf("Invalid arguments.")
	}
	c.address = ctx.Args()[0]
	c.force = ctx.Bool("force")
	return nil
}

func NewCmdBTC(cl *libcmdline.CommandLine) cli.Command {
	return cli.Command{
		Name:        "btc",
		Usage:       "keybase btc [--force] <address>",
		Description: "Claim a bitcoin address.",
		Flags: []cli.Flag{
			cli.BoolFlag{Name: "force", Usage: ""},
		},
		Action: func(c *cli.Context) {
			cl.ChooseCommand(&CmdBTC{}, "btc", c)
		},
	}
}

type CmdDeviceList struct {
	sessionID int
	all       bool
}

func (c *CmdDeviceList) ParseArgv(ctx *cli.Context) error {
	if len(ctx.Args()) != 0 {
		return fmt.Errorf("Invalid arguments.")
	}
	c.all = ctx.Bool("all")
	return nil
}

func NewCmdDeviceList(cl *libcmdline.CommandLine) cli.Command {
	return cli.Command{
		Name:        "list",
		Usage:       "keybase device list [--all]",
		Description: "List devices for the user",
		Flags: []cli.Flag{
			cli.BoolFlag{Name: "all", Usage: ""},
		},
		Action: func(c *cli.Context) {
			cl.ChooseCommand(&CmdDeviceList{}, "list", c)
		},
	}
}

type CmdDeviceAdd struct {
	sessionID    int
	secretPhrase string
}

func (c *CmdDeviceAdd) ParseArgv(ctx *cli.Context) error {
	if len(ctx.Args()) != 1 {
		return fmt.Errorf("Invalid arguments.")
	}
	c.secretPhrase = ctx.Args()[0]
	return nil
}

func NewCmdDeviceAdd(cl *libcmdline.CommandLine) cli.Command {
	return cli.Command{
		Name:        "add",
		Usage:       "keybase device add <secretPhrase>",
		Description: "Add a new device using a phrase from an existing device.",
		Flags:       []cli.Flag{},
		Action: func(c *cli.Context) {
			cl.ChooseCommand(&CmdDeviceAdd{}, "add", c)
		},
	}
}

type CmdDoctor struct {
	sessionID int
}

func (c *CmdDoctor) ParseArgv(ctx *cli.Context) error {
	if len(ctx.Args()) != 0 {
		return fmt.Errorf("Invalid arguments.")
	}

	return nil
}

func NewCmdDoctor(cl *libcmdline.CommandLine) cli.Command {
	return cli.Command{
		Name:        "doctor",
		Usage:       "keybase doctor",
		Description: "Checks account status and offers to fix any issues.",
		Flags:       []cli.Flag{},
		Action: func(c *cli.Context) {
			cl.ChooseCommand(&CmdDoctor{}, "doctor", c)
		},
	}
}

type CmdFavoriteAdd struct {
	sessionID int
	name      string
}

func (c *CmdFavoriteAdd) ParseArgv(ctx *cli.Context) error {
	if len(ctx.Args()) != 1 {
		return fmt.Errorf("Invalid arguments.")
	}
	c.name = ctx.Args()[0]
	return nil
}

func NewCmdFavoriteAdd(cl *libcmdline.CommandLine) cli.Command {
	return cli.Command{
		Name:        "add",
		Usage:       "keybase favorite add <name>",
		Description: "Add favorite top-level folder by name.",
		Flags:       []cli.Flag{},
		Action: func(c *cli.Context) {
			cl.ChooseCommand(&CmdFavoriteAdd{}, "add", c)
		},
	}
}
